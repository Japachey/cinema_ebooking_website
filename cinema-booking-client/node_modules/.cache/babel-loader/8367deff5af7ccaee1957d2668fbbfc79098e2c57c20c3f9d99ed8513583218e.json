{"ast":null,"code":"var _jsxFileName = \"/Users/harsh/Documents/GitHub/cinema_ebooking/cinema-booking-client/src/pages/RegistrationConfirmation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './RegistrationConfirmation.css'; // Ensure the styles are imported\n// import Navbar from '../components/Navbar';\n// import Header from '../components/Header'; // Import the Header component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistrationConfirmation = () => {\n  _s();\n  // State to manage the verification code input fields\n  const [code, setCode] = useState(new Array(5).fill(\"\"));\n\n  // Handle input change\n  const handleChange = (e, index) => {\n    const value = e.target.value;\n    // Allow only one numeric value per input box\n    if (/^\\d$/.test(value)) {\n      const newCode = [...code];\n      newCode[index] = value;\n      setCode(newCode);\n\n      // Move focus to the next input box if there's a next one\n      if (index < 4) {\n        document.getElementById(`code-input-${index + 1}`).focus();\n      }\n    }\n  };\n\n  // Handle key press for backspace\n  const handleKeyDown = (e, index) => {\n    if (e.key === \"Backspace\") {\n      const newCode = [...code];\n\n      // If the current input is empty, move to the previous input\n      if (newCode[index] === \"\") {\n        if (index > 0) {\n          document.getElementById(`code-input-${index - 1}`).focus();\n        }\n      } else {\n        // If the current input has a value, clear it and stay on the same input\n        newCode[index] = \"\";\n        setCode(newCode);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-summary-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"verification-title\",\n        children: \"Verify Your Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"A verification code was sent to your email. Please verify your\", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"account to finish registering your account.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"verification-code-inputs\",\n          children: code.map((num, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `code-input-${index}`,\n            type: \"text\",\n            maxLength: \"1\",\n            className: \"verification-input\",\n            value: num,\n            onChange: e => handleChange(e, index),\n            onKeyDown: e => handleKeyDown(e, index) // Handle backspace key press\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"*Login Failed/LoginSuccessful*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(RegistrationConfirmation, \"bKlzHW5QWiJ9tPisyflOK5kzxdU=\");\n_c = RegistrationConfirmation;\nexport default RegistrationConfirmation;\nvar _c;\n$RefreshReg$(_c, \"RegistrationConfirmation\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RegistrationConfirmation","_s","code","setCode","Array","fill","handleChange","e","index","value","target","test","newCode","document","getElementById","focus","handleKeyDown","key","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","num","id","type","maxLength","onChange","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/harsh/Documents/GitHub/cinema_ebooking/cinema-booking-client/src/pages/RegistrationConfirmation.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './RegistrationConfirmation.css'; // Ensure the styles are imported\n// import Navbar from '../components/Navbar';\n// import Header from '../components/Header'; // Import the Header component\n\nconst RegistrationConfirmation = () => {\n  // State to manage the verification code input fields\n  const [code, setCode] = useState(new Array(5).fill(\"\"));\n\n  // Handle input change\n  const handleChange = (e, index) => {\n    const value = e.target.value;\n    // Allow only one numeric value per input box\n    if (/^\\d$/.test(value)) {\n      const newCode = [...code];\n      newCode[index] = value;\n      setCode(newCode);\n\n      // Move focus to the next input box if there's a next one\n      if (index < 4) {\n        document.getElementById(`code-input-${index + 1}`).focus();\n      }\n    }\n  };\n\n  // Handle key press for backspace\n  const handleKeyDown = (e, index) => {\n    if (e.key === \"Backspace\") {\n      const newCode = [...code];\n\n      // If the current input is empty, move to the previous input\n      if (newCode[index] === \"\") {\n        if (index > 0) {\n          document.getElementById(`code-input-${index - 1}`).focus();\n        }\n      } else {\n        // If the current input has a value, clear it and stay on the same input\n        newCode[index] = \"\";\n        setCode(newCode);\n      }\n    }\n  };\n\n  return (\n    <div>\n      {/*<Navbar />*/}\n      <div className=\"order-summary-container\">\n        {/* <Header /> */}\n        <h2 className=\"verification-title\">Verify Your Account</h2>\n        <div className=\"verification-details\">\n          <p>\n            A verification code was sent to your email. Please verify your\n            <p>account to finish registering your account.</p>\n          </p>\n          <div className=\"verification-code-inputs\">\n            {code.map((num, index) => (\n              <input\n                key={index}\n                id={`code-input-${index}`}\n                type=\"text\"\n                maxLength=\"1\"\n                className=\"verification-input\"\n                value={num}\n                onChange={(e) => handleChange(e, index)}\n                onKeyDown={(e) => handleKeyDown(e, index)} // Handle backspace key press\n              />\n            ))}\n          </div>\n          <button className=\"confirm-button\">Confirm</button>\n          <p>*Login Failed/LoginSuccessful*</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegistrationConfirmation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}